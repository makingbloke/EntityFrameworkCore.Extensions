// Copyright ©2021-2025 Mike King.
// This file is licensed to you under the MIT license.
// See the License.txt file in the solution root for more information.

using Microsoft.EntityFrameworkCore.Diagnostics;
using System.Collections.Concurrent;
using System.Data.Common;
using System.Text.RegularExpressions;

namespace DotDoc.EntityFrameworkCore.Extensions.ExecuteUpdate;

/// <summary>
/// Interceptor used to capture the SQL and parameters generated by ExecuteUpdate.
/// </summary>
internal sealed partial class ExecuteUpdateGetRowsCommandInterceptor : DbCommandInterceptor
{
    #region internal fields

    /// <summary>
    /// Singleton instance of this interceptor.
    /// </summary>
    internal static readonly ExecuteUpdateGetRowsCommandInterceptor Instance = new();

    #endregion internal fields

    #region private fields

    /// <summary>
    /// Dictionary holding the results of ExecuteUpdateGetRows.
    /// </summary>
    private static readonly ConcurrentDictionary<Guid, ExecuteUpdateQuery> UpdateQueries = new();

    #endregion private fields

    #region private constructors

    /// <summary>
    /// Initializes a new instance of the <see cref="ExecuteUpdateGetRowsCommandInterceptor"/> class.
    /// </summary>
    private ExecuteUpdateGetRowsCommandInterceptor()
    {
    }

    #endregion private constructors

    #region public methods

    /// <inheritdoc/>
    public override ValueTask<InterceptionResult<int>> NonQueryExecutingAsync(DbCommand command, CommandEventData eventData, InterceptionResult<int> result, CancellationToken cancellationToken = default)
    {
        result = HandleNonQueryExecuting(eventData.CommandSource, command, result);
        return base.NonQueryExecutingAsync(command, eventData, result, cancellationToken);
    }

    #endregion public methods

    #region internal methods

    /// <summary>
    /// Get the SQL and parameters needed to run an Update statement.
    /// </summary>
    /// <param name="updateId">The updateId.</param>
    /// <returns>The result.</returns>
    internal static ExecuteUpdateQuery GetUpdateQuery(Guid updateId)
    {
        if (!UpdateQueries.TryRemove(updateId, out ExecuteUpdateQuery? updateQuery))
        {
            throw new InvalidOperationException($"{nameof(UpdateQueries)} entry not found.");
        }

        return updateQuery;
    }

    #endregion internal methods

    #region private methods

    /// <summary>
    /// Check if the command executing is an ExecuteUpdate and the SQL contains an updateId.
    /// If it is then store the SQL and parameters then supress the commands execution.
    /// </summary>
    /// <param name="commandSource">Source of command.</param>
    /// <param name="command">The command.</param>
    /// <param name="result">The default return value for this method <see cref="InterceptionResult{int32}"/>.</param>
    /// <returns><paramref name="result"/>.</returns>
    private static InterceptionResult<int> HandleNonQueryExecuting(CommandSource commandSource, DbCommand command, InterceptionResult<int> result)
    {
        if (IsExecuteUpdate(commandSource))
        {
            Guid updateId = GetUpdateId(command.CommandText);

            if (updateId != Guid.Empty)
            {
                UpdateQueries[updateId] = new(command.CommandText, command.Parameters.Cast<DbParameter>().ToArray());
                result = InterceptionResult<int>.SuppressWithResult(0);
            }
        }

        return result;
    }

    /// <summary>
    /// Check if a <see cref="CommandSource"/> value is <see cref="CommandSource.ExecuteUpdate"/>.
    /// </summary>
    /// <param name="commandSource">The value to check.</param>
    /// <returns><see langword="true"/> if the source is execute update else, <see langword="false"/>.</returns>
    /// <remarks>
    /// There is an issue with EF core 9 where Db Interceptors can receive an obsolete value in CommandSource
    /// of BulkUpdate(8) instead of the (correct) value ExecuteUpdate(8). Convert the values to int's to cover
    /// both cases: https://github.com/dotnet/efcore/issues/34678 .
    /// </remarks>
    private static bool IsExecuteUpdate(CommandSource commandSource) =>
        (int)commandSource == (int)CommandSource.ExecuteUpdate;

    /// <summary>
    /// Get the UpdateId from the SQL comment (Tag) if there is one.
    /// </summary>
    /// <param name="sql">The sql.</param>
    /// <returns>The update Id (<see cref="Guid"/>) if one is found else, an empty Guid.</returns>
    private static Guid GetUpdateId(string sql)
    {
        Match match = GetUpdateIdRegex().Match(sql);

        Guid updateId = match.Success
            ? Guid.Parse(match.Groups["UpdateId"].Value)
            : Guid.Empty;

        return updateId;
    }

    /// <summary>
    /// A regex used to search the SQL for a comment -- ExecuteUpdateGetRows with a <see cref="Guid"/> updateId in numeric (N) format.
    /// </summary>
    [GeneratedRegex("^-- ExecuteUpdateGetRows (?<UpdateId>[0-9A-Fa-f]{32})\r?$", RegexOptions.Multiline | RegexOptions.ExplicitCapture)]
    private static partial Regex GetUpdateIdRegex();

    #endregion private methods
}